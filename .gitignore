import {
  type ReactNode,
  createContext,
  useContext,
  useState,
  useEffect,
} from "react";

export interface User {
  id: number;
  name: string;
  email: string;
  role: string;
}
interface AuthContextType {
  isLoggedIn: boolean;
  user: User | null;
  token: string | null;
  login: (userData: {
    user: object;
    tokens: { accessToken: string; refreshToken: string };
  }) => void;
  logout: () => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const ctx = useContext(AuthContext);
  if (!ctx) throw new Error("useAuth must be used inside AuthProvider");
  return ctx;
};

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [user, setUser] = useState<object | null>(null);
  const [accessToken, setAccessToken] = useState<string | null>(null);
  const [refreshToken, setRefreshToken] = useState<string | null>(null);

  // Load from localStorage on mount
  useEffect(() => {
    const savedUser = localStorage.getItem("user");
    const savedAccessToken = localStorage.getItem("token");
    const savedRefreshToken = localStorage.getItem("refreshToken");

    if (savedUser && savedAccessToken) {
      setUser(JSON.parse(savedUser));
      setAccessToken(savedAccessToken);
      setRefreshToken(savedRefreshToken);
      setIsLoggedIn(true);
    }
  }, []);

  const login = (userData: {
    user: object;
    tokens: { accessToken: string; refreshToken: string };
  }) => {
    setIsLoggedIn(true);
    setUser(userData.user);
    setAccessToken(userData.tokens.accessToken);
    setRefreshToken(userData.tokens.refreshToken);

    localStorage.setItem("user", JSON.stringify(userData.user));
    localStorage.setItem("token", userData.tokens.accessToken);
    localStorage.setItem("refreshToken", userData.tokens.refreshToken);
  };

  const logout = () => {
    setIsLoggedIn(false);
    setUser(null);
    setAccessToken(null);
    setRefreshToken(null);
    localStorage.removeItem("user");
    localStorage.removeItem("token");
    localStorage.removeItem("refreshToken");
  };

  return (
    <AuthContext.Provider
      value={{ isLoggedIn, user, token: accessToken, login, logout }}
    >
      {children}
    </AuthContext.Provider>
  );
};
